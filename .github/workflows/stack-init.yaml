  name: "Setup and deploy a nodejs site to Azure App service"

  on:
   workflow_dispatch:
    inputs:
      AZURE_APP_SERVICE_NAME:
        required: true
        
  permissions:
     id-token: write
     contents: write
      
  jobs:
    stack-initialization:
      runs-on: ubuntu-latest
      environment:
         name: development
         url: ${{ steps.get-url.outputs.your_site }}
      steps:
        - run: echo "Creating and deploying a nodejs site to azure app service"       
        - name: checkout
          uses: actions/checkout@v2
          with:
            persist-credentials: false
        
        - name: use node.js v14 
          uses: actions/setup-node@v1
          with:
            node-version: '14'
            check-latest: true
            registry-url: https://registry.npmjs.org/

        - name: Stacks framework code generation
          run: |
            npx express-generator expressjs-scaffold
            cp -r expressjs-scaffold/* .
            rm -rf expressjs-scaffold
            
        - name: Configure git
          run: |
            git config --global user.email "${{ github.actor }}@users.noreply.github.com"
            git config --global user.name "${{ github.actor }}"
            git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            
        - name: Commit generated code and initialize workflows
          run: |
            appName="${{ github.event.inputs.AZURE_APP_SERVICE_NAME }}"
            echo "$appName" > appname 
            git add .
            git commit -m "Generate framework code and initialize workflows"
            git push 
            # We cant push to main since its protected in this stack

        ### TODO - These steps ideally should be done in a deploy workflow, and referenced here
        
        - name: npm install, build, and test
          run: |
            npm install
            
        - name: 'Az CLI OIDC login with subscription'
          uses: 'azure/login@v1'
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
        - name: 'Deploy using webapps-deploy'
          id: deploy-to-webapp
          uses: Azure/webapps-deploy@v2
          with: 
             app-name: ${{ github.event.inputs.AZURE_APP_NAME }}
             package: .
          
        - name: Website URL
          run: |
            echo "Website URL: https://${{ github.event.inputs.AZURE_APP_SERVICE_NAME }}.azurewebsites.net"

        - name: Wait for website to come online
          env:
              AZURE_APP_SERVICE_NAME: ${{ github.event.inputs.AZURE_APP_SERVICE_NAME }}
          timeout-minutes: 5 
          id: get-url
          run: |
            echo "Waiting for the website to come alive..."
            URL="https://${{ env.AZURE_APP_SERVICE_NAME }}.azurewebsites.net"
            sleep 20
            STATUS_CODE=$(curl -o /dev/null -s -w "%{http_code}\n" $URL)
            echo "STATUSCODE: $STATUS_CODE"
            while [ $STATUS_CODE -ne 200 ]
            do
              sleep 10
              STATUS_CODE=$(curl -o /dev/null -s -w "%{http_code}\n" $URL)
            echo "STATUSCODE: $STATUS_CODE"
            done
            echo "Website is up and running..."
            echo "Browse here: $URL"       
            echo "::set-output name=your_site::$URL"
